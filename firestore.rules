rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ========== FUNÇÕES AUXILIARES COM CUSTOM CLAIMS ==========
    // Estas funções leem do token do usuário, não do banco. Custo ZERO.
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function getAcademiaId() {
      return request.auth.token.academiaId;
    }
    
    function isMemberOf(academiaId) {
      return getAcademiaId() == academiaId;
    }
    
    function isAdminOf(academiaId) {
      return getUserRole() == 'admin' && isMemberOf(academiaId);
    }
    
    function isInstructorOf(academiaId) {
      return getUserRole() == 'instructor' && isMemberOf(academiaId);
    }
    
    function isStudentOf(academiaId) {
      return getUserRole() == 'student' && isMemberOf(academiaId);
    }
    
    // Função para verificar se o usuário não tem academia associada (para criação de nova academia)
    function hasNoAcademy() {
      return getAcademiaId() == null;
    }
    
    // ========== COLEÇÃO DE USUÁRIOS ==========
    match /users/{userId} {
      // 1. Um usuário sempre pode ler e atualizar seus próprios dados
      allow read, update: if request.auth.uid == userId;
      
      // 2. Admins da mesma academia podem ler dados dos usuários
      allow read: if isAdminOf(resource.data.academiaId);
      
      // 3. Bloquear criação e exclusão diretas (devem ser via Auth/Cloud Functions)
      allow create, delete: if false;
    }
    
    // ========== COLEÇÃO DE ACADEMIAS ==========
    match /gyms/{academiaId} {
      // Leitura: apenas membros da academia
      allow read: if isMemberOf(academiaId);
      
      // Criação: Desabilitada no cliente (será feita via Cloud Function)
      allow create: if false;
      
      // Atualização/Exclusão: Apenas admins da PRÓPRIA academia
      allow update, delete: if isAdminOf(academiaId);
      
      // --- Subcoleções ---
      match /alunos/{alunoId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId) || isInstructorOf(academiaId);
      }
      
      match /instrutores/{instrutorId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
      
      match /turmas/{turmaId} {
        allow read: if isMemberOf(academiaId);
        allow create, update: if isAdminOf(academiaId) || isInstructorOf(academiaId);
        allow delete: if isAdminOf(academiaId);
        
        match /alunos/{alunoId} {
          allow read: if isMemberOf(academiaId);
          allow write: if isAdminOf(academiaId) || isInstructorOf(academiaId);
        }
      }
      
      match /pagamentos/{pagamentoId} {
        // Admin ou instrutor pode ler todos os pagamentos
        allow read: if isAdminOf(academiaId) || isInstructorOf(academiaId);
        // O aluno dono do pagamento também pode lê-lo
        allow read: if isStudentOf(academiaId) && resource.data.alunoId == request.auth.uid;
        // Apenas admins podem criar/editar pagamentos
        allow write: if isAdminOf(academiaId);
      }
      
      match /checkins/{checkinId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isMemberOf(academiaId);
      }
      
      match /planos/{planoId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
      
      match /notifications/{notificationId} {
        allow read: if isMemberOf(academiaId);
        allow create: if isAdminOf(academiaId) || isInstructorOf(academiaId);
        allow update: if isMemberOf(academiaId);
        allow delete: if isAdminOf(academiaId);
      }
      
      // --- Subcoleções que eram globais (agora isoladas por academia) ---
      match /modalities/{modalityId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
      
      match /plans/{planId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
      
      match /announcements/{announcementId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
      
      match /graduation_levels/{levelId} {
        allow read: if isMemberOf(academiaId);
        allow write: if isAdminOf(academiaId);
      }
    }
    
    // ========== COLEÇÕES GLOBAIS REMOVIDAS ==========
    // Estas coleções foram movidas para subcoleções dentro de cada academia
    match /modalities/{modalityId} {
      allow read, write: if false; // Desabilitado - usar /gyms/{academiaId}/modalities
    }
    
    match /plans/{planId} {
      allow read, write: if false; // Desabilitado - usar /gyms/{academiaId}/plans
    }
    
    match /announcements/{announcementId} {
      allow read, write: if false; // Desabilitado - usar /gyms/{academiaId}/announcements
    }
    
    
    // ========== COLEÇÕES LEGADAS - DESABILITADAS POR SEGURANÇA ==========
    match /classes/{classId} {
      allow read, write: if false; // Desabilitado até migração completa
    }
    
    match /payments/{paymentId} {
      allow read, write: if false; // Desabilitado até migração completa
    }
    
    // ========== OUTRAS COLEÇÕES ==========
    match /invites/{inviteId} {
      allow read: if isSignedIn();
      allow create: if getUserRole() == 'admin';
      allow update: if isSignedIn();
    }
    
    match /graduations/{graduationId} {
      allow read: if isSignedIn();
      allow write: if getUserRole() == 'admin' || getUserRole() == 'instructor';
    }
    
    match /graduation_levels/{levelId} {
      allow read, write: if false; // Desabilitado - usar /gyms/{academiaId}/graduation_levels
    }
  }
}
