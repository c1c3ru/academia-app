rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData() {
      return exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) ? 
        get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data : 
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data : 
          {});
    }
    
    function isMemberOf(academiaId) {
      return isSignedIn() && getUserData().academiaId == academiaId;
    }
    
    function isAdmin() {
      return isSignedIn() && (getUserData().tipo == 'admin' || getUserData().userType == 'admin');
    }
    
    function isInstructor() {
      return isSignedIn() && (getUserData().tipo == 'instrutor' || getUserData().userType == 'instructor');
    }
    
    function isStudent() {
      return isSignedIn() && (getUserData().tipo == 'aluno' || getUserData().userType == 'student');
    }
    
    // Coleção de usuários - acesso restrito ao próprio usuário
    match /usuarios/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      // Permitir leitura para admins (para AdminDashboard e AdminStudents)
      allow read: if isSignedIn() && isAdmin();
    }
    
    // Coleção de academias
    match /academias/{academiaId} {
      // Leitura: membros da academia ou qualquer usuário autenticado para busca por código
      allow read: if isSignedIn() && (isMemberOf(academiaId) || true);
      // Criação: qualquer usuário autenticado pode criar nova academia (temporário para debug)
      allow create: if isSignedIn();
      // Atualização/Exclusão: apenas admins membros da academia
      allow update, delete: if isSignedIn() && isMemberOf(academiaId) && isAdmin();
      
      // Subcoleção de alunos
      match /alunos/{alunoId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow write: if isSignedIn() && isMemberOf(academiaId) && (isAdmin() || isInstructor());
      }
      
      // Subcoleção de instrutores
      match /instrutores/{instrutorId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow write: if isSignedIn() && isMemberOf(academiaId) && isAdmin();
      }
      
      // Subcoleção de turmas
      match /turmas/{turmaId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow write: if isSignedIn() && isMemberOf(academiaId) && (isAdmin() || isInstructor());
      }
      
      // Subcoleção de pagamentos
      match /pagamentos/{pagamentoId} {
        allow read: if isSignedIn() && isMemberOf(academiaId) && (isAdmin() || isInstructor());
        allow write: if isSignedIn() && isMemberOf(academiaId) && isAdmin();
      }
      
      // Subcoleção de check-ins
      match /checkins/{checkinId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow write: if isSignedIn() && isMemberOf(academiaId);
      }
      
      // Subcoleção de planos
      match /planos/{planoId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow write: if isSignedIn() && isMemberOf(academiaId) && isAdmin();
      }
      
      // Subcoleção de notificações
      match /notifications/{notificationId} {
        allow read: if isSignedIn() && isMemberOf(academiaId);
        allow create: if isSignedIn() && isMemberOf(academiaId) && (isAdmin() || isInstructor());
        allow update: if isSignedIn() && isMemberOf(academiaId);
        allow delete: if isSignedIn() && isMemberOf(academiaId) && isAdmin();
      }
    }
    
    // Coleção de modalidades globais - leitura pública para criação de academias
    match /modalities/{modalityId} {
      allow read: if true; // Permite leitura pública para seleção durante criação de academia
      allow write: if isSignedIn() && isAdmin(); // Apenas admins podem modificar
    }
    
    // Coleção de planos globais - leitura pública
    match /plans/{planId} {
      allow read: if true; // Permite leitura pública
      allow write: if isSignedIn() && isAdmin(); // Apenas admins podem modificar
    }
    
    // Coleção de avisos globais - leitura pública
    match /announcements/{announcementId} {
      allow read: if true; // Permite leitura pública
      allow write: if isSignedIn() && isAdmin(); // Apenas admins podem modificar
    }
    
    // Coleção legacy 'users' - manter compatibilidade temporária
    match /users/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      // Permitir leitura para admins (para AdminDashboard e AdminStudents)
      allow read: if isSignedIn() && isAdmin();
    }
    
    // Coleção legacy 'classes' - compatibilidade temporária
    match /classes/{classId} {
      allow read: if isSignedIn(); // Permitir leitura para usuários autenticados
      allow write: if isSignedIn() && (isAdmin() || isInstructor());
    }
    
    // Coleção 'invites' - sistema de convites
    match /invites/{inviteId} {
      allow read: if isSignedIn(); // Permitir leitura para verificar convites
      allow create: if isSignedIn() && isAdmin(); // Apenas admins podem criar convites
      allow update: if isSignedIn(); // Permitir atualização para aceitar convites
    }
    
    // Coleção legacy 'payments' - compatibilidade temporária
    match /payments/{paymentId} {
      allow read: if isSignedIn(); // Permitir leitura para usuários autenticados
      allow write: if isSignedIn() && (isAdmin() || isInstructor());
    }
  }
}
