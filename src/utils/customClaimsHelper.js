import { auth } from '../services/firebase';

/**
 * Utilit√°rio para gerenciar Custom Claims do Firebase Authentication
 * Integra com a nova arquitetura sem superAdmin
 */

/**
 * For√ßa a atualiza√ß√£o do ID Token para obter os Custom Claims mais recentes
 * Deve ser chamado ap√≥s opera√ß√µes que modificam claims (createAcademy, useInvite, etc.)
 */
export const refreshUserToken = async () => {
  try {
    console.log('üîÑ refreshUserToken: For√ßando atualiza√ß√£o do ID Token...');
    
    const currentUser = auth.currentUser;
    if (!currentUser) {
      console.log('‚ö†Ô∏è refreshUserToken: Nenhum usu√°rio logado');
      return null;
    }
    
    // For√ßa a atualiza√ß√£o do token (true = for√ßar refresh)
    const idToken = await currentUser.getIdToken(true);
    console.log('‚úÖ refreshUserToken: Token atualizado com sucesso');
    
    return idToken;
  } catch (error) {
    console.error('‚ùå refreshUserToken: Erro ao atualizar token:', error);
    throw error;
  }
};

/**
 * Obt√©m os Custom Claims do usu√°rio atual
 */
export const getUserClaims = async () => {
  try {
    console.log('üîç getUserClaims: Obtendo claims do usu√°rio...');
    
    const currentUser = auth.currentUser;
    if (!currentUser) {
      console.log('‚ö†Ô∏è getUserClaims: Nenhum usu√°rio logado');
      return null;
    }
    
    // Obter o token atual (pode estar em cache)
    const idTokenResult = await currentUser.getIdTokenResult();
    const claims = idTokenResult.claims;
    
    console.log('üìã getUserClaims: Claims obtidos:', {
      role: claims.role,
      academiaId: claims.academiaId,
      hasAcademiaId: !!claims.academiaId,
      hasRole: !!claims.role
    });
    
    return {
      role: claims.role || null,
      academiaId: claims.academiaId || null,
      customClaims: claims
    };
  } catch (error) {
    console.error('‚ùå getUserClaims: Erro ao obter claims:', error);
    throw error;
  }
};

/**
 * Verifica se o usu√°rio tem Custom Claims configurados
 */
export const hasValidClaims = async () => {
  try {
    const claims = await getUserClaims();
    
    if (!claims) {
      return false;
    }
    
    const isValid = !!(claims.role && claims.academiaId);
    
    console.log('üîç hasValidClaims: Resultado:', {
      isValid,
      role: claims.role,
      academiaId: claims.academiaId
    });
    
    return isValid;
  } catch (error) {
    console.error('‚ùå hasValidClaims: Erro na verifica√ß√£o:', error);
    return false;
  }
};

/**
 * Aguarda at√© que os Custom Claims sejam atualizados
 * √ötil ap√≥s chamar Cloud Functions que modificam claims
 */
export const waitForClaimsUpdate = async (expectedAcademiaId, maxAttempts = 10, delayMs = 1000) => {
  console.log('‚è≥ waitForClaimsUpdate: Aguardando atualiza√ß√£o dos claims...', {
    expectedAcademiaId,
    maxAttempts,
    delayMs
  });
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      console.log(`üîÑ waitForClaimsUpdate: Tentativa ${attempt}/${maxAttempts}`);
      
      // For√ßar refresh do token
      await refreshUserToken();
      
      // Verificar se os claims foram atualizados
      const claims = await getUserClaims();
      
      if (claims && claims.academiaId === expectedAcademiaId) {
        console.log('‚úÖ waitForClaimsUpdate: Claims atualizados com sucesso!');
        return claims;
      }
      
      if (attempt < maxAttempts) {
        console.log(`‚è≥ waitForClaimsUpdate: Claims ainda n√£o atualizados, aguardando ${delayMs}ms...`);
        await new Promise(resolve => setTimeout(resolve, delayMs));
      }
    } catch (error) {
      console.error(`‚ùå waitForClaimsUpdate: Erro na tentativa ${attempt}:`, error);
      
      if (attempt === maxAttempts) {
        throw error;
      }
    }
  }
  
  console.log('‚ö†Ô∏è waitForClaimsUpdate: Timeout - claims n√£o foram atualizados no tempo esperado');
  return null;
};

/**
 * Verifica se o usu√°rio precisa de onboarding (sem claims v√°lidos)
 */
export const needsOnboarding = async () => {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) {
      return true; // N√£o logado = precisa de onboarding
    }
    
    const hasValidClaimsResult = await hasValidClaims();
    const needsOnboardingResult = !hasValidClaimsResult;
    
    console.log('üîç needsOnboarding: Resultado:', {
      needsOnboarding: needsOnboardingResult,
      hasValidClaims: hasValidClaimsResult,
      userEmail: currentUser.email
    });
    
    return needsOnboardingResult;
  } catch (error) {
    console.error('‚ùå needsOnboarding: Erro na verifica√ß√£o:', error);
    return true; // Em caso de erro, assumir que precisa de onboarding
  }
};

/**
 * Utilit√°rio para debug - mostra todos os claims do usu√°rio
 */
export const debugUserClaims = async () => {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) {
      console.log('üêõ debugUserClaims: Nenhum usu√°rio logado');
      return;
    }
    
    const idTokenResult = await currentUser.getIdTokenResult();
    
    console.log('üêõ debugUserClaims: Informa√ß√µes completas do usu√°rio:', {
      uid: currentUser.uid,
      email: currentUser.email,
      displayName: currentUser.displayName,
      emailVerified: currentUser.emailVerified,
      isAnonymous: currentUser.isAnonymous,
      claims: idTokenResult.claims,
      authTime: idTokenResult.authTime,
      issuedAtTime: idTokenResult.issuedAtTime,
      expirationTime: idTokenResult.expirationTime
    });
  } catch (error) {
    console.error('‚ùå debugUserClaims: Erro no debug:', error);
  }
};
