import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ScrollView, Alert } from 'react-native';
import { 
  Card, 
  Text, 
  Button, 
  TextInput, 
  HelperText,
  Snackbar,
  Chip,
  Divider,
  Surface,
  Menu,
  RadioButton
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import { useAuth } from '../../contexts/AuthProvider';
import { firestoreService } from '../../services/firestoreService';

const InjuryScreen = ({ navigation, route }) => {
  const { user, academia } = useAuth();
  const { injury, isEditing = false } = route.params || {};
  
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({ visible: false, message: '', type: 'info' });
  
  const [formData, setFormData] = useState({
    bodyPart: '',
    injuryType: '',
    description: '',
    severity: 'leve',
    dateOccurred: new Date(),
    status: 'ativo',
    treatment: '',
    doctorNotes: '',
    expectedRecovery: '',
    restrictions: ''
  });
  
  const [errors, setErrors] = useState({});
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [bodyPartMenuVisible, setBodyPartMenuVisible] = useState(false);
  const [injuryTypeMenuVisible, setInjuryTypeMenuVisible] = useState(false);

  const bodyParts = [
    'Cabe√ßa', 'Pesco√ßo', 'Ombro Direito', 'Ombro Esquerdo',
    'Bra√ßo Direito', 'Bra√ßo Esquerdo', 'Cotovelo Direito', 'Cotovelo Esquerdo',
    'Antebra√ßo Direito', 'Antebra√ßo Esquerdo', 'Punho Direito', 'Punho Esquerdo',
    'M√£o Direita', 'M√£o Esquerda', 'Dedos da M√£o', 'T√≥rax', 'Costelas',
    'Coluna Cervical', 'Coluna Tor√°cica', 'Coluna Lombar', 'Quadril',
    'Coxa Direita', 'Coxa Esquerda', 'Joelho Direito', 'Joelho Esquerdo',
    'Canela Direita', 'Canela Esquerda', 'Tornozelo Direito', 'Tornozelo Esquerdo',
    'P√© Direito', 'P√© Esquerdo', 'Dedos do P√©'
  ];

  const injuryTypes = [
    'Contus√£o', 'Entorse', 'Distens√£o Muscular', 'Estiramento',
    'Luxa√ß√£o', 'Fratura', 'Corte', 'Arranh√£o', 'Queimadura',
    'Tendinite', 'Bursite', 'Les√£o Ligamentar', 'Les√£o Meniscal',
    'H√©rnia de Disco', 'Fascite Plantar', 'Dor Muscular', 'C√£ibra',
    'Inflama√ß√£o', 'Outros'
  ];

  const severityLevels = [
    { value: 'leve', label: 'Leve', color: '#4CAF50', description: 'Desconforto m√≠nimo, sem limita√ß√£o' },
    { value: 'moderada', label: 'Moderada', color: '#FF9800', description: 'Dor percept√≠vel, limita√ß√£o parcial' },
    { value: 'grave', label: 'Grave', color: '#F44336', description: 'Dor intensa, limita√ß√£o significativa' }
  ];

  const statusOptions = [
    { value: 'ativo', label: 'Ativo', color: '#F44336', description: 'Les√£o atual em tratamento' },
    { value: 'recuperando', label: 'Recuperando', color: '#FF9800', description: 'Em processo de recupera√ß√£o' },
    { value: 'recuperado', label: 'Recuperado', color: '#4CAF50', description: 'Totalmente recuperado' },
    { value: 'cronico', label: 'Cr√¥nico', color: '#9C27B0', description: 'Condi√ß√£o permanente ou recorrente' }
  ];

  useEffect(() => {
    if (isEditing && injury) {
      setFormData({
        bodyPart: injury.bodyPart || '',
        injuryType: injury.injuryType || '',
        description: injury.description || '',
        severity: injury.severity || 'leve',
        dateOccurred: injury.dateOccurred?.toDate ? injury.dateOccurred.toDate() : new Date(injury.dateOccurred || Date.now()),
        status: injury.status || 'ativo',
        treatment: injury.treatment || '',
        doctorNotes: injury.doctorNotes || '',
        expectedRecovery: injury.expectedRecovery || '',
        restrictions: injury.restrictions || ''
      });
    }
  }, [isEditing, injury]);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.bodyPart.trim()) {
      newErrors.bodyPart = 'Parte do corpo √© obrigat√≥ria';
    }

    if (!formData.injuryType.trim()) {
      newErrors.injuryType = 'Tipo de les√£o √© obrigat√≥rio';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Descri√ß√£o √© obrigat√≥ria';
    } else if (formData.description.trim().length < 10) {
      newErrors.description = 'Descri√ß√£o deve ter pelo menos 10 caracteres';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);

      const injuryData = {
        userId: user.uid,
        bodyPart: formData.bodyPart.trim(),
        injuryType: formData.injuryType.trim(),
        description: formData.description.trim(),
        severity: formData.severity,
        dateOccurred: formData.dateOccurred,
        status: formData.status,
        treatment: formData.treatment.trim(),
        doctorNotes: formData.doctorNotes.trim(),
        expectedRecovery: formData.expectedRecovery.trim(),
        restrictions: formData.restrictions.trim(),
        updatedAt: new Date()
      };

      if (isEditing && injury) {
        await firestoreService.update(
          `gyms/${academia.id}/injuries`, 
          injury.id, 
          injuryData
        );
        setSnackbar({
          visible: true,
          message: 'Les√£o atualizada com sucesso! üéâ',
          type: 'success'
        });
      } else {
        injuryData.createdAt = new Date();
        injuryData.createdBy = user.uid;
        await firestoreService.create(
          `gyms/${academia.id}/injuries`, 
          injuryData
        );
        setSnackbar({
          visible: true,
          message: 'Les√£o registrada com sucesso! üéâ',
          type: 'success'
        });
      }

      setTimeout(() => {
        navigation.goBack();
      }, 2000);

    } catch (error) {
      console.error('Erro ao salvar les√£o:', error);
      setSnackbar({
        visible: true,
        message: 'Erro ao salvar les√£o. Tente novamente.',
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  const updateFormData = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Limpar erro quando o usu√°rio come√ßar a digitar
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  };

  const getSeverityColor = (severity) => {
    return severityLevels.find(s => s.value === severity)?.color || '#9E9E9E';
  };

  const getStatusColor = (status) => {
    return statusOptions.find(s => s.value === status)?.color || '#9E9E9E';
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        keyboardShouldPersistTaps="handled"
      >
        <Card style={styles.card}>
          <Card.Content>
            <View style={styles.headerSection}>
              <Ionicons name="bandage-outline" size={32} color="#F44336" />
              <Text style={styles.title}>
                {isEditing ? 'Editar Les√£o' : 'Registrar Nova Les√£o'}
              </Text>
              <Text style={styles.subtitle}>
                Registre detalhes sobre les√µes para acompanhamento m√©dico
              </Text>
            </View>

            {/* Dados B√°sicos */}
            <Text style={styles.sectionTitle}>ü©π Informa√ß√µes da Les√£o</Text>
            
            {/* Parte do Corpo */}
            <Menu
              visible={bodyPartMenuVisible}
              onDismiss={() => setBodyPartMenuVisible(false)}
              anchor={
                <TextInput
                  label="Parte do Corpo Afetada *"
                  value={formData.bodyPart}
                  mode="outlined"
                  style={styles.input}
                  right={<TextInput.Icon icon="chevron-down" onPress={() => setBodyPartMenuVisible(true)} />}
                  onPress={() => setBodyPartMenuVisible(true)}
                  editable={false}
                  error={!!errors.bodyPart}
                />
              }
            >
              <ScrollView style={styles.menuScrollView}>
                {bodyParts.map((part) => (
                  <Menu.Item
                    key={part}
                    onPress={() => {
                      updateFormData('bodyPart', part);
                      setBodyPartMenuVisible(false);
                    }}
                    title={part}
                  />
                ))}
              </ScrollView>
            </Menu>
            {errors.bodyPart && <HelperText type="error">{errors.bodyPart}</HelperText>}

            {/* Tipo de Les√£o */}
            <Menu
              visible={injuryTypeMenuVisible}
              onDismiss={() => setInjuryTypeMenuVisible(false)}
              anchor={
                <TextInput
                  label="Tipo de Les√£o *"
                  value={formData.injuryType}
                  mode="outlined"
                  style={styles.input}
                  right={<TextInput.Icon icon="chevron-down" onPress={() => setInjuryTypeMenuVisible(true)} />}
                  onPress={() => setInjuryTypeMenuVisible(true)}
                  editable={false}
                  error={!!errors.injuryType}
                />
              }
            >
              <ScrollView style={styles.menuScrollView}>
                {injuryTypes.map((type) => (
                  <Menu.Item
                    key={type}
                    onPress={() => {
                      updateFormData('injuryType', type);
                      setInjuryTypeMenuVisible(false);
                    }}
                    title={type}
                  />
                ))}
              </ScrollView>
            </Menu>
            {errors.injuryType && <HelperText type="error">{errors.injuryType}</HelperText>}

            {/* Descri√ß√£o */}
            <TextInput
              label="Descri√ß√£o Detalhada *"
              value={formData.description}
              onChangeText={(value) => updateFormData('description', value)}
              mode="outlined"
              multiline
              numberOfLines={3}
              style={styles.input}
              error={!!errors.description}
              placeholder="Descreva como a les√£o ocorreu, sintomas, etc."
            />
            {errors.description && <HelperText type="error">{errors.description}</HelperText>}

            {/* Data da Les√£o */}
            <TextInput
              label="Data da Les√£o"
              value={formData.dateOccurred.toLocaleDateString('pt-BR')}
              mode="outlined"
              style={styles.input}
              right={<TextInput.Icon icon="calendar" onPress={() => setShowDatePicker(true)} />}
              onPress={() => setShowDatePicker(true)}
              editable={false}
            />

            {showDatePicker && (
              <DateTimePicker
                value={formData.dateOccurred}
                mode="date"
                display="default"
                onChange={(event, selectedDate) => {
                  setShowDatePicker(false);
                  if (selectedDate) {
                    updateFormData('dateOccurred', selectedDate);
                  }
                }}
                maximumDate={new Date()}
              />
            )}

            <Divider style={styles.divider} />

            {/* Severidade */}
            <Text style={styles.sectionTitle}>‚ö†Ô∏è Severidade</Text>
            <RadioButton.Group 
              onValueChange={(value) => updateFormData('severity', value)} 
              value={formData.severity}
            >
              {severityLevels.map((level) => (
                <View key={level.value} style={styles.radioItem}>
                  <RadioButton.Item
                    label={level.label}
                    value={level.value}
                    labelStyle={{ color: level.color, fontWeight: 'bold' }}
                  />
                  <Text style={styles.radioDescription}>{level.description}</Text>
                </View>
              ))}
            </RadioButton.Group>

            <Divider style={styles.divider} />

            {/* Status */}
            <Text style={styles.sectionTitle}>üìä Status da Les√£o</Text>
            <RadioButton.Group 
              onValueChange={(value) => updateFormData('status', value)} 
              value={formData.status}
            >
              {statusOptions.map((option) => (
                <View key={option.value} style={styles.radioItem}>
                  <RadioButton.Item
                    label={option.label}
                    value={option.value}
                    labelStyle={{ color: option.color, fontWeight: 'bold' }}
                  />
                  <Text style={styles.radioDescription}>{option.description}</Text>
                </View>
              ))}
            </RadioButton.Group>

            <Divider style={styles.divider} />

            {/* Informa√ß√µes de Tratamento */}
            <Text style={styles.sectionTitle}>üè• Tratamento e Observa√ß√µes</Text>
            
            <TextInput
              label="Tratamento Atual (opcional)"
              value={formData.treatment}
              onChangeText={(value) => updateFormData('treatment', value)}
              mode="outlined"
              multiline
              numberOfLines={2}
              style={styles.input}
              placeholder="Ex: Fisioterapia, medicamentos, repouso..."
            />

            <TextInput
              label="Observa√ß√µes M√©dicas (opcional)"
              value={formData.doctorNotes}
              onChangeText={(value) => updateFormData('doctorNotes', value)}
              mode="outlined"
              multiline
              numberOfLines={2}
              style={styles.input}
              placeholder="Instru√ß√µes do m√©dico, diagn√≥stico..."
            />

            <TextInput
              label="Previs√£o de Recupera√ß√£o (opcional)"
              value={formData.expectedRecovery}
              onChangeText={(value) => updateFormData('expectedRecovery', value)}
              mode="outlined"
              style={styles.input}
              placeholder="Ex: 2 semanas, 1 m√™s..."
            />

            <TextInput
              label="Restri√ß√µes de Atividade (opcional)"
              value={formData.restrictions}
              onChangeText={(value) => updateFormData('restrictions', value)}
              mode="outlined"
              multiline
              numberOfLines={2}
              style={styles.input}
              placeholder="Ex: N√£o fazer for√ßa com o bra√ßo, evitar corrida..."
            />

            {/* Resumo Visual */}
            <Surface style={styles.summaryContainer}>
              <View style={styles.summaryHeader}>
                <Ionicons name="information-circle-outline" size={24} color="#2196F3" />
                <Text style={styles.summaryTitle}>Resumo da Les√£o</Text>
              </View>
              <View style={styles.summaryContent}>
                <Chip 
                  mode="flat"
                  style={[styles.summaryChip, { backgroundColor: getSeverityColor(formData.severity) }]}
                  textStyle={{ color: 'white', fontWeight: 'bold' }}
                >
                  {severityLevels.find(s => s.value === formData.severity)?.label}
                </Chip>
                <Chip 
                  mode="flat"
                  style={[styles.summaryChip, { backgroundColor: getStatusColor(formData.status) }]}
                  textStyle={{ color: 'white', fontWeight: 'bold' }}
                >
                  {statusOptions.find(s => s.value === formData.status)?.label}
                </Chip>
              </View>
            </Surface>

            {/* Bot√µes */}
            <View style={styles.buttonContainer}>
              <Button
                mode="outlined"
                onPress={() => navigation.goBack()}
                style={styles.button}
                disabled={loading}
              >
                Cancelar
              </Button>
              <Button
                mode="contained"
                onPress={handleSave}
                style={styles.button}
                loading={loading}
                disabled={loading}
              >
                {isEditing ? 'Atualizar' : 'Registrar'}
              </Button>
            </View>
          </Card.Content>
        </Card>
      </ScrollView>

      <Snackbar
        visible={snackbar.visible}
        onDismiss={() => setSnackbar({ ...snackbar, visible: false })}
        duration={snackbar.type === 'success' ? 3000 : 5000}
        style={{
          backgroundColor: snackbar.type === 'success' ? '#4CAF50' : '#F44336'
        }}
      >
        {snackbar.message}
      </Snackbar>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
  },
  card: {
    marginBottom: 16,
    elevation: 4,
  },
  headerSection: {
    alignItems: 'center',
    marginBottom: 24,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 12,
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 22,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 16,
    marginBottom: 12,
    color: '#333',
  },
  input: {
    marginBottom: 8,
  },
  menuScrollView: {
    maxHeight: 200,
  },
  divider: {
    marginVertical: 16,
  },
  radioItem: {
    marginBottom: 8,
  },
  radioDescription: {
    fontSize: 12,
    color: '#666',
    marginLeft: 32,
    marginTop: -8,
    marginBottom: 8,
  },
  summaryContainer: {
    padding: 16,
    marginVertical: 16,
    borderRadius: 8,
    elevation: 2,
    backgroundColor: '#E3F2FD',
  },
  summaryHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  summaryTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
    color: '#1976D2',
  },
  summaryContent: {
    flexDirection: 'row',
    gap: 8,
  },
  summaryChip: {
    elevation: 2,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24,
    gap: 12,
  },
  button: {
    flex: 1,
  },
});

export default InjuryScreen;