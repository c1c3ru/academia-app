import { useEffect, useRef } from 'react';
import { onAuthStateChanged, signInWithPopup, GoogleAuthProvider, FacebookAuthProvider, OAuthProvider, signOut, signInWithEmailAndPassword } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { auth, db } from '../services/firebase';
import useAuthStore from '../stores/authStore';
import { normalizeUserProfile } from '../utils/userTypeHelpers';

// Vari√°vel global para controlar a inicializa√ß√£o do listener
let authListenerInitialized = false;
let authUnsubscribe = null;

// Hook para migrar dados do Context API para Zustand
export const useAuthMigration = () => {
  const {
    setUser,
    setUserProfile,
    setAcademia,
    setLoading,
    login,
    logout,
    user,
    userProfile,
    academia,
    loading,
    isAuthenticated,
    getUserType,
    isComplete
  } = useAuthStore();

  // Fun√ß√£o para buscar dados da academia
  const fetchAcademiaData = async (academiaId) => {
    try {
      console.log('üè¢ fetchAcademiaData: Buscando dados da academia:', academiaId);
      const academiaDoc = await getDoc(doc(db, 'gyms', academiaId));
      if (academiaDoc.exists()) {
        console.log('‚úÖ fetchAcademiaData: Academia encontrada');
        setAcademia({
          id: academiaId,
          ...academiaDoc.data()
        });
      } else {
        console.log('‚ùå fetchAcademiaData: Academia n√£o encontrada, limpando associa√ß√£o do usu√°rio');
        setAcademia(null);
        
        // Se a academia n√£o existe mais, limpar a associa√ß√£o do usu√°rio
        if (user?.uid) {
          try {
            await setDoc(doc(db, 'users', user.uid), {
              academiaId: null,
              updatedAt: new Date()
            }, { merge: true });
            
            // Atualizar o estado local
            const updatedProfile = { ...userProfile, academiaId: null };
            setUserProfile(updatedProfile);
          } catch (error) {
            console.error('‚ùå Erro ao limpar associa√ß√£o da academia:', error);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå fetchAcademiaData: Erro ao buscar dados da academia:', error);
      setAcademia(null);
    }
  };

  // Fun√ß√£o para buscar perfil do usu√°rio
  const fetchUserProfile = async (userId, firebaseUser) => {
    try {
      console.log('üîç fetchUserProfile: Buscando perfil do usu√°rio:', userId);
      const userDoc = await getDoc(doc(db, 'users', userId));
      
      if (userDoc.exists()) {
        console.log('‚úÖ fetchUserProfile: Perfil encontrado');
        const profileData = { id: userId, ...userDoc.data() };
        setUserProfile(profileData);
        
        // Buscar dados da academia se o usu√°rio tiver uma associada
        if (profileData.academiaId) {
          await fetchAcademiaData(profileData.academiaId);
        }
      } else {
        console.log('‚ùå fetchUserProfile: Perfil n√£o encontrado, criando perfil b√°sico...');
        
        // Criar perfil b√°sico se n√£o existir
        const basicProfile = {
          name: firebaseUser?.displayName || firebaseUser?.email?.split('@')[0] || 'Usu√°rio',
          email: firebaseUser?.email || '',
          photoURL: firebaseUser?.photoURL || null,
          tipo: null, // Ser√° definido na tela de sele√ß√£o
          userType: null, // Ser√° definido na tela de sele√ß√£o
          profileCompleted: false, // Indica que precisa completar o perfil
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        };
        
        await setDoc(doc(db, 'users', userId), basicProfile);
        console.log('‚úÖ fetchUserProfile: Perfil b√°sico criado');
        
        const profileData = { id: userId, ...basicProfile };
        setUserProfile(profileData);
      }
    } catch (error) {
      console.error('‚ùå fetchUserProfile: Erro ao buscar perfil:', error);
      setUserProfile(null);
    }
  };

  // Listener do Firebase Auth
  useEffect(() => {
    // Evitar m√∫ltiplas inicializa√ß√µes usando vari√°vel global
    if (authListenerInitialized) {
      console.log('üîÑ useAuthMigration: Listener j√° inicializado globalmente, pulando...');
      return;
    }

    console.log('üîÑ useAuthMigration: Configurando listener do Firebase Auth');
    authListenerInitialized = true;
    setLoading(true);

    // Timeout de seguran√ßa para evitar loading infinito
    const loadingTimeout = setTimeout(() => {
      console.log('‚ö†Ô∏è useAuthMigration: Timeout de loading - for√ßando loading = false');
      setLoading(false);
    }, 5000);

    authUnsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      console.log('üîÑ Auth state changed:', firebaseUser ? 'Logado' : 'Deslogado');
      clearTimeout(loadingTimeout); // Cancelar timeout se auth resolver
      
      try {
        setUser(firebaseUser);
        
        if (firebaseUser) {
          await fetchUserProfile(firebaseUser.uid, firebaseUser);
        } else {
          setUserProfile(null);
          setAcademia(null);
        }
      } catch (error) {
        console.error('‚ùå Erro no auth state change:', error);
      } finally {
        console.log('üîÑ useAuthMigration: Definindo loading como false');
        setLoading(false);
      }
    });

    return () => {
      console.log('üîÑ useAuthMigration: Removendo listener do Firebase Auth');
      clearTimeout(loadingTimeout);
      if (authUnsubscribe) {
        authUnsubscribe();
        authUnsubscribe = null;
      }
      authListenerInitialized = false;
    };
  }, []); // Remover depend√™ncias que causam re-renders infinitos

  // Fun√ß√µes de login social
  const signInWithGoogle = async () => {
    try {
      const provider = new GoogleAuthProvider();
      provider.addScope('profile');
      provider.addScope('email');
      
      const result = await signInWithPopup(auth, provider);
      const firebaseUser = result.user;
      
      // Verificar se o usu√°rio j√° existe no Firestore
      let userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
      
      if (!userDoc.exists()) {
        // Criar perfil b√°sico para usu√°rio do Google
        await setDoc(doc(db, 'users', firebaseUser.uid), {
          name: firebaseUser.displayName,
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          tipo: null, // Ser√° definido na tela de sele√ß√£o
          userType: null, // Ser√° definido na tela de sele√ß√£o
          profileCompleted: false, // Indica que precisa completar o perfil
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      
      return firebaseUser;
    } catch (error) {
      console.error('Erro no login Google:', error);
      throw error;
    }
  };

  const signInWithFacebook = async () => {
    try {
      const provider = new FacebookAuthProvider();
      provider.addScope('email');
      provider.addScope('public_profile');
      
      const result = await signInWithPopup(auth, provider);
      const firebaseUser = result.user;
      
      // Verificar se o usu√°rio j√° existe no Firestore
      let userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
      
      if (!userDoc.exists()) {
        await setDoc(doc(db, 'users', firebaseUser.uid), {
          name: firebaseUser.displayName,
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          tipo: null, // Ser√° definido na tela de sele√ß√£o
          userType: null, // Ser√° definido na tela de sele√ß√£o
          profileCompleted: false, // Indica que precisa completar o perfil
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      
      return firebaseUser;
    } catch (error) {
      console.error('Erro no login Facebook:', error);
      throw error;
    }
  };

  const signInWithMicrosoft = async () => {
    try {
      const provider = new OAuthProvider('microsoft.com');
      provider.addScope('email');
      provider.addScope('profile');
      
      const result = await signInWithPopup(auth, provider);
      const firebaseUser = result.user;
      
      let userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
      
      if (!userDoc.exists()) {
        await setDoc(doc(db, 'users', firebaseUser.uid), {
          name: firebaseUser.displayName,
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          tipo: null, // Ser√° definido na tela de sele√ß√£o
          userType: null, // Ser√° definido na tela de sele√ß√£o
          profileCompleted: false, // Indica que precisa completar o perfil
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      
      return firebaseUser;
    } catch (error) {
      console.error('Erro no login Microsoft:', error);
      throw error;
    }
  };

  const signInWithApple = async () => {
    try {
      const provider = new OAuthProvider('apple.com');
      provider.addScope('email');
      provider.addScope('name');
      
      const result = await signInWithPopup(auth, provider);
      const firebaseUser = result.user;
      
      let userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
      
      if (!userDoc.exists()) {
        await setDoc(doc(db, 'users', firebaseUser.uid), {
          name: firebaseUser.displayName || 'Usu√°rio Apple',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          tipo: null, // Ser√° definido na tela de sele√ß√£o
          userType: null, // Ser√° definido na tela de sele√ß√£o
          profileCompleted: false, // Indica que precisa completar o perfil
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      
      return firebaseUser;
    } catch (error) {
      console.error('Erro no login Apple:', error);
      throw error;
    }
  };

  // Fun√ß√£o para atualizar perfil do usu√°rio
  const updateUserProfile = async (updates) => {
    try {
      if (!user?.uid) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      console.log('üîÑ updateUserProfile: Atualizando perfil:', updates);
      
      // Atualizar no Firestore
      await setDoc(doc(db, 'users', user.uid), updates, { merge: true });
      
      // Atualizar no Zustand store
      const currentProfile = userProfile || {};
      const updatedProfile = { ...currentProfile, ...updates };
      setUserProfile(updatedProfile);
      
      console.log('‚úÖ updateUserProfile: Perfil atualizado com sucesso');
      
      return updatedProfile;
    } catch (error) {
      console.error('‚ùå updateUserProfile: Erro ao atualizar perfil:', error);
      throw error;
    }
  };

  // Fun√ß√£o de login com email e senha
  const signIn = async (email, password) => {
    try {
      console.log('üîê Iniciando login com email e senha...');
      
      const result = await signInWithEmailAndPassword(auth, email, password);
      const firebaseUser = result.user;
      
      console.log('‚úÖ Login realizado com sucesso:', firebaseUser.email);
      return firebaseUser;
    } catch (error) {
      console.error('‚ùå Erro no login:', error);
      throw error;
    }
  };

  // Fun√ß√£o para atualizar associa√ß√£o de academia
  const updateAcademiaAssociation = async (academiaId, academiaData = null) => {
    try {
      if (!user?.uid) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      console.log('üè¢ updateAcademiaAssociation: Associando usu√°rio √† academia:', academiaId);
      
      // Atualizar perfil do usu√°rio com a academia
      await setDoc(doc(db, 'users', user.uid), {
        academiaId: academiaId,
        updatedAt: new Date()
      }, { merge: true });
      
      // Atualizar estado local
      const updatedProfile = { ...userProfile, academiaId };
      setUserProfile(updatedProfile);
      
      // Se dados da academia foram fornecidos, definir no estado
      if (academiaData) {
        setAcademia({ id: academiaId, ...academiaData });
      } else if (academiaId) {
        // Buscar dados da academia
        await fetchAcademiaData(academiaId);
      }
      
      console.log('‚úÖ updateAcademiaAssociation: Associa√ß√£o atualizada com sucesso');
      
      return updatedProfile;
    } catch (error) {
      console.error('‚ùå updateAcademiaAssociation: Erro ao atualizar associa√ß√£o:', error);
      throw error;
    }
  };

  // Fun√ß√£o de logout
  const logoutUser = async () => {
    try {
      console.log('üö™ Iniciando logout...');
      
      // Fazer signOut do Firebase
      await signOut(auth);
      
      // Limpar estado do Zustand
      logout(); // Chama a fun√ß√£o logout do store
      
      console.log('‚úÖ Logout realizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao fazer logout:', error);
      throw error;
    }
  };

  return {
    user,
    userProfile,
    academia,
    loading,
    isAuthenticated,
    getUserType,
    isComplete: isComplete(),
    login,
    logout: logoutUser,
    signIn,
    setUser,
    setUserProfile,
    setAcademia,
    fetchUserProfile,
    fetchAcademiaData,
    updateUserProfile,
    updateAcademiaAssociation,
    signInWithGoogle,
    signInWithFacebook,
    signInWithMicrosoft,
    signInWithApple
  };
};

export default useAuthMigration;
